import { EmoParams } from './interfaces';
import { EmoHook } from './types';
export default class Emo {
    activatePrint: boolean;
    zone: string | null;
    hook: EmoHook | null;
    activateEmojis: boolean;
    constructor({ zone, activatePrint, activateEmojis, hook }?: EmoParams);
    info(...obj: any[]): string;
    warning(...obj: any[]): string;
    error(...obj: any[]): string;
    query(...obj: any[]): string;
    queryError(...obj: any[]): string;
    encrypt(...obj: any[]): string;
    encryptError(...obj: any[]): string;
    decrypt(...obj: any[]): string;
    decryptError(...obj: any[]): string;
    time(...obj: any[]): string;
    timeError(...obj: any[]): string;
    param(...obj: any[]): string;
    paramError(...obj: any[]): string;
    debug(...obj: any[]): string;
    state(...obj: any[]): string;
    save(...obj: any[]): string;
    delete(...obj: any[]): string;
    data(...obj: any[]): string;
    line(...obj: any[]): string;
    init(...obj: any[]): string;
    update(...obj: any[]): string;
    ok(...obj: any[]): string;
    build(...obj: any[]): string;
    aconstructor(...obj: any[]): string;
    notFound(...obj: any[]): string;
    found(...obj: any[]): string;
    result(...obj: any[]): string;
    input(...obj: any[]): string;
    output(...obj: any[]): string;
    function(...obj: any[]): string;
    key(...obj: any[]): string;
    security(...obj: any[]): string;
    accessToken(...obj: any[]): string;
    refreshToken(...obj: any[]): string;
    transmit(...obj: any[]): string;
    start(...obj: any[]): string;
    stop(...obj: any[]): string;
    in(...obj: any[]): string;
    out(...obj: any[]): string;
    arrowIn(...obj: any[]): string;
    arrowOut(...obj: any[]): string;
    smallArrowIn(...obj: any[]): string;
    smallArrowOut(...obj: any[]): string;
    requestGet(...obj: any[]): string;
    requestPost(...obj: any[]): string;
    msg(...obj: any[]): string;
    ready(...obj: any[]): string;
    sep(): string;
    section(name: string): string;
    sectionEnd(): string;
    emo(emoji: string, obj: Array<any>): string;
    print(data: Array<any> | Record<string, any>): void;
    static json(data: Array<any> | Record<string, any>): void;
    private _getEmoString;
}
