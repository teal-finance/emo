// Code generated by https://github.com/teal-finance/emo/blob/main/codegen/golang/gen.go ; DO NOT EDIT.

package emo

func (l Logger) Info(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("ℹ️", l, false, args)
	}
	return Event{}
}

func (l Logger) Warning(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🔔", l, false, args)
	}
	return Event{}
}

func (l Logger) Error(args ...any) Event {
	return processEvent("💢", l, true, args)
}

func (l Logger) Query(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🗄️", l, false, args)
	}
	return Event{}
}

func (l Logger) QueryError(args ...any) Event {
	return processEvent("🗄️", l, true, args)
}

func (l Logger) Encrypt(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🎼", l, false, args)
	}
	return Event{}
}

func (l Logger) EncryptError(args ...any) Event {
	return processEvent("🎼", l, true, args)
}

func (l Logger) Decrypt(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🗝️", l, false, args)
	}
	return Event{}
}

func (l Logger) DecryptError(args ...any) Event {
	return processEvent("🗝️", l, true, args)
}

func (l Logger) Time(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("⏱️", l, false, args)
	}
	return Event{}
}

func (l Logger) TimeError(args ...any) Event {
	return processEvent("⏱️", l, true, args)
}

func (l Logger) Param(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("📩", l, false, args)
	}
	return Event{}
}

func (l Logger) ParamError(args ...any) Event {
	return processEvent("📩", l, true, args)
}

func (l Logger) Debug(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("💊", l, false, args)
	}
	return Event{}
}

func (l Logger) State(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("📢", l, false, args)
	}
	return Event{}
}

func (l Logger) Save(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("💾", l, false, args)
	}
	return Event{}
}

func (l Logger) Delete(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("❌", l, false, args)
	}
	return Event{}
}

func (l Logger) Data(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("💼", l, false, args)
	}
	return Event{}
}

func (l Logger) Line(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("➖", l, false, args)
	}
	return Event{}
}

func (l Logger) Init(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🎬", l, false, args)
	}
	return Event{}
}

func (l Logger) Update(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🆙", l, false, args)
	}
	return Event{}
}

func (l Logger) Ok(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🆗", l, false, args)
	}
	return Event{}
}

func (l Logger) Build(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🔧", l, false, args)
	}
	return Event{}
}

func (l Logger) Aconstructor(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🛠️", l, false, args)
	}
	return Event{}
}

func (l Logger) NotFound(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🚫", l, false, args)
	}
	return Event{}
}

func (l Logger) Found(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("👁️‍🗨️", l, false, args)
	}
	return Event{}
}

func (l Logger) Result(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("📌", l, false, args)
	}
	return Event{}
}

func (l Logger) Input(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("📥", l, false, args)
	}
	return Event{}
}

func (l Logger) Output(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("📤", l, false, args)
	}
	return Event{}
}

func (l Logger) Function(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🔨", l, false, args)
	}
	return Event{}
}

func (l Logger) Key(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🔑", l, false, args)
	}
	return Event{}
}

func (l Logger) AccessToken(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🔑", l, false, args)
	}
	return Event{}
}

func (l Logger) RefreshToken(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🗝️", l, false, args)
	}
	return Event{}
}

func (l Logger) Transmit(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("📡", l, false, args)
	}
	return Event{}
}

func (l Logger) Start(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🏁", l, false, args)
	}
	return Event{}
}

func (l Logger) Stop(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🛑", l, false, args)
	}
	return Event{}
}

func (l Logger) ArrowIn(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("=>", l, false, args)
	}
	return Event{}
}

func (l Logger) ArrowOut(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("<=", l, false, args)
	}
	return Event{}
}

func (l Logger) SmallArrowIn(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("->", l, false, args)
	}
	return Event{}
}

func (l Logger) SmallArrowOut(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("<-", l, false, args)
	}
	return Event{}
}

func (l Logger) RequestGet(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🔷", l, false, args)
	}
	return Event{}
}

func (l Logger) RequestPost(args ...any) Event {
	if l.Print || l.Hook != nil {
		return processEvent("🔶", l, false, args)
	}
	return Event{}
}
