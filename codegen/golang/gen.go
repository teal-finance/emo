package golang

import (
	"fmt"
	"log"
	"path/filepath"

	"github.com/dolmen-go/codegen"
	"github.com/teal-finance/emo/codegen/core"
)

func GenGo(ref []core.Ref) {
	template := fileStart
	for _, item := range ref {
		template += genFunc(item.Name, item.Emoji, item.IsError)
	}

	tmpl := codegen.MustParse(template)

	fn, err := filepath.Abs("generated.go")
	if err != nil {
		log.Fatal(err)
	}

	if err := tmpl.CreateFile(fn, "emo"); err != nil {
		log.Fatal(err)
	}

	fmt.Println("[codegen] File: " + fn)
}

var fileStart = `// Code generated by https://github.com/teal-finance/emo/blob/main/codegen/golang/gen.go ; DO NOT EDIT.

package emo

import "fmt"
`

func genFunc(name, emoji string, isError bool) string {
	defaultFunctions := `

func ` + name + `(args ...any) Event {
	return DefaultZone.` + name + `(args...)
}

func ` + name + `f(format string, v ...any) Event {
	return DefaultZone.` + name + `f(format, v...)
}

`

	errorFunctions := `

func (zone Zone) ` + name + `(args ...any) Event {
	return zone.NewEvent("` + emoji + `", true, args...).Print().CallHook()
}

func (zone Zone) ` + name + `f(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.` + name + `(s)
}

`
	nonErrorFunctions := `

func (zone Zone) ` + name + `(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("` + emoji + `", false, args...).Print().CallHook()
}

func (zone Zone) ` + name + `f(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.` + name + `(s)
}
`

	if isError {
		return defaultFunctions + errorFunctions
	} else {
		return defaultFunctions + nonErrorFunctions
	}
}
