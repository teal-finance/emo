// Code generated by https://github.com/teal-finance/emo/blob/main/codegen/golang/gen.go ; DO NOT EDIT.

package emo

import (
	"fmt"
	"log"
)

func (zone Zone) Info(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("ℹ️", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Infof(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Info(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Warning(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🔔", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Warningf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Warning(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Error(args ...any) Event {
	return zone.NewEvent("💢", true, args...).Print().CallHook()
}

func (zone Zone) Errorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.Error(s)
}

func (zone Zone) Query(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🗄️", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Queryf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Query(s)
	}
	var evt Event
	return evt
}

func (zone Zone) QueryError(args ...any) Event {
	return zone.NewEvent("🗄️", true, args...).Print().CallHook()
}

func (zone Zone) QueryErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.QueryError(s)
}

func (zone Zone) Encrypt(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🎼", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Encryptf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Encrypt(s)
	}
	var evt Event
	return evt
}

func (zone Zone) EncryptError(args ...any) Event {
	return zone.NewEvent("🎼", true, args...).Print().CallHook()
}

func (zone Zone) EncryptErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.EncryptError(s)
}

func (zone Zone) Decrypt(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🗝️", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Decryptf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Decrypt(s)
	}
	var evt Event
	return evt
}

func (zone Zone) DecryptError(args ...any) Event {
	return zone.NewEvent("🗝️", true, args...).Print().CallHook()
}

func (zone Zone) DecryptErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.DecryptError(s)
}

func (zone Zone) Time(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("⏱️", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Timef(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Time(s)
	}
	var evt Event
	return evt
}

func (zone Zone) TimeError(args ...any) Event {
	return zone.NewEvent("⏱️", true, args...).Print().CallHook()
}

func (zone Zone) TimeErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.TimeError(s)
}

func (zone Zone) Param(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("📩", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Paramf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Param(s)
	}
	var evt Event
	return evt
}

func (zone Zone) ParamError(args ...any) Event {
	return zone.NewEvent("📩", true, args...).Print().CallHook()
}

func (zone Zone) ParamErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.ParamError(s)
}

func (zone Zone) Debug(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("💊", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Debugf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Debug(s)
	}
	var evt Event
	return evt
}

func (zone Zone) State(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("📢", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Statef(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.State(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Save(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("💾", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Savef(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Save(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Delete(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("❌", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Deletef(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Delete(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Data(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("💼", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Dataf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Data(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Line(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("➖", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Linef(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Line(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Init(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🎬", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Initf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Init(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Update(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🆙", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Updatef(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Update(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Ok(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🆗", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Okf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Ok(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Build(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🔧", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Buildf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Build(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Aconstructor(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🛠️", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Aconstructorf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Aconstructor(s)
	}
	var evt Event
	return evt
}

func (zone Zone) NotFound(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🚫", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) NotFoundf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.NotFound(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Found(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("👁️‍🗨️", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Foundf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Found(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Result(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("📌", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Resultf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Result(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Input(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("📥", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Inputf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Input(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Output(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("📤", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Outputf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Output(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Function(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🔨", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Functionf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Function(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Key(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🔑", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Keyf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Key(s)
	}
	var evt Event
	return evt
}

func (zone Zone) AccessToken(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🔑", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) AccessTokenf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.AccessToken(s)
	}
	var evt Event
	return evt
}

func (zone Zone) RefreshToken(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🗝️", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) RefreshTokenf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.RefreshToken(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Transmit(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("📡", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Transmitf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Transmit(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Start(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🏁", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Startf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Start(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Stop(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🛑", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) Stopf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.Stop(s)
	}
	var evt Event
	return evt
}

func (zone Zone) ArrowIn(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("=>", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) ArrowInf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.ArrowIn(s)
	}
	var evt Event
	return evt
}

func (zone Zone) ArrowOut(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("<=", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) ArrowOutf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.ArrowOut(s)
	}
	var evt Event
	return evt
}

func (zone Zone) SmallArrowIn(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("->", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) SmallArrowInf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.SmallArrowIn(s)
	}
	var evt Event
	return evt
}

func (zone Zone) SmallArrowOut(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("<-", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) SmallArrowOutf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.SmallArrowOut(s)
	}
	var evt Event
	return evt
}

func (zone Zone) RequestGet(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🔷", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) RequestGetf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.RequestGet(s)
	}
	var evt Event
	return evt
}

func (zone Zone) RequestPost(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("🔶", false, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) RequestPostf(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.RequestPost(s)
	}
	var evt Event
	return evt
}

func (zone Zone) Default() *log.Logger {
	return log.Default()
}

func (zone Zone) Print(args ...any) Event {
	return zone.P().NewEvent("📰", false, args...).Print()
}

func (zone Zone) Printf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.P().NewEvent("📰", false, s).Print()
}

func (zone Zone) Fatal(args ...any) {
	m := zone.NewEvent("🤯", true, args...).Message()
	log.Fatal(m)
}

func (zone Zone) Fatalf(format string, v ...any) {
	s := fmt.Sprintf(format, v...)
	m := zone.NewEvent("🤯", true, s).Message()
	log.Fatal(m)
}

func (zone Zone) Panic(args ...any) {
	m := zone.NewEvent("😵", true, args...).Message()
	log.Panic(m)
}

func (zone Zone) Panicf(format string, v ...any) {
	s := fmt.Sprintf(format, v...)
	m := zone.NewEvent("😵", true, s).Message()
	log.Panic(m)
}
