// Code generated by https://github.com/teal-finance/emo/blob/main/codegen/golang/gen.go ; DO NOT EDIT.

package emo

import "fmt"

func Info(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("ℹ️", false, args...).Print().CallHook()
}

func Infof(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("ℹ️", false, s).Print().CallHook()
}

func (zone Zone) Info(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("ℹ️", false, args...).Print().CallHook()
}

func (zone Zone) Infof(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("ℹ️", false, s).Print().CallHook()
}

func Warning(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🔔", false, args...).Print().CallHook()
}

func Warningf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🔔", false, s).Print().CallHook()
}

func (zone Zone) Warning(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🔔", false, args...).Print().CallHook()
}

func (zone Zone) Warningf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🔔", false, s).Print().CallHook()
}

func Error(args ...any) Event {
	return DefaultZone.NewEvent("💢", true, args...).Print().CallHook()
}

func Errorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("💢", true, s).Print().CallHook()
}

func (zone Zone) Error(args ...any) Event {
	return zone.NewEvent("💢", true, args...).Print().CallHook()
}

func (zone Zone) Errorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("💢", true, s).Print().CallHook()
}

func Query(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🗄️", false, args...).Print().CallHook()
}

func Queryf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🗄️", false, s).Print().CallHook()
}

func (zone Zone) Query(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🗄️", false, args...).Print().CallHook()
}

func (zone Zone) Queryf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🗄️", false, s).Print().CallHook()
}

func QueryError(args ...any) Event {
	return DefaultZone.NewEvent("🗄️", true, args...).Print().CallHook()
}

func QueryErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🗄️", true, s).Print().CallHook()
}

func (zone Zone) QueryError(args ...any) Event {
	return zone.NewEvent("🗄️", true, args...).Print().CallHook()
}

func (zone Zone) QueryErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🗄️", true, s).Print().CallHook()
}

func Encrypt(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🎼", false, args...).Print().CallHook()
}

func Encryptf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🎼", false, s).Print().CallHook()
}

func (zone Zone) Encrypt(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🎼", false, args...).Print().CallHook()
}

func (zone Zone) Encryptf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🎼", false, s).Print().CallHook()
}

func EncryptError(args ...any) Event {
	return DefaultZone.NewEvent("🎼", true, args...).Print().CallHook()
}

func EncryptErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🎼", true, s).Print().CallHook()
}

func (zone Zone) EncryptError(args ...any) Event {
	return zone.NewEvent("🎼", true, args...).Print().CallHook()
}

func (zone Zone) EncryptErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🎼", true, s).Print().CallHook()
}

func Decrypt(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🗝️", false, args...).Print().CallHook()
}

func Decryptf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🗝️", false, s).Print().CallHook()
}

func (zone Zone) Decrypt(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🗝️", false, args...).Print().CallHook()
}

func (zone Zone) Decryptf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🗝️", false, s).Print().CallHook()
}

func DecryptError(args ...any) Event {
	return DefaultZone.NewEvent("🗝️", true, args...).Print().CallHook()
}

func DecryptErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🗝️", true, s).Print().CallHook()
}

func (zone Zone) DecryptError(args ...any) Event {
	return zone.NewEvent("🗝️", true, args...).Print().CallHook()
}

func (zone Zone) DecryptErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🗝️", true, s).Print().CallHook()
}

func Time(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("⏱️", false, args...).Print().CallHook()
}

func Timef(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("⏱️", false, s).Print().CallHook()
}

func (zone Zone) Time(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("⏱️", false, args...).Print().CallHook()
}

func (zone Zone) Timef(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("⏱️", false, s).Print().CallHook()
}

func TimeError(args ...any) Event {
	return DefaultZone.NewEvent("⏱️", true, args...).Print().CallHook()
}

func TimeErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("⏱️", true, s).Print().CallHook()
}

func (zone Zone) TimeError(args ...any) Event {
	return zone.NewEvent("⏱️", true, args...).Print().CallHook()
}

func (zone Zone) TimeErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("⏱️", true, s).Print().CallHook()
}

func Param(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("📩", false, args...).Print().CallHook()
}

func Paramf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("📩", false, s).Print().CallHook()
}

func (zone Zone) Param(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("📩", false, args...).Print().CallHook()
}

func (zone Zone) Paramf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("📩", false, s).Print().CallHook()
}

func ParamError(args ...any) Event {
	return DefaultZone.NewEvent("📩", true, args...).Print().CallHook()
}

func ParamErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("📩", true, s).Print().CallHook()
}

func (zone Zone) ParamError(args ...any) Event {
	return zone.NewEvent("📩", true, args...).Print().CallHook()
}

func (zone Zone) ParamErrorf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("📩", true, s).Print().CallHook()
}

func Debug(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("💊", false, args...).Print().CallHook()
}

func Debugf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("💊", false, s).Print().CallHook()
}

func (zone Zone) Debug(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("💊", false, args...).Print().CallHook()
}

func (zone Zone) Debugf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("💊", false, s).Print().CallHook()
}

func State(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("📢", false, args...).Print().CallHook()
}

func Statef(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("📢", false, s).Print().CallHook()
}

func (zone Zone) State(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("📢", false, args...).Print().CallHook()
}

func (zone Zone) Statef(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("📢", false, s).Print().CallHook()
}

func Save(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("💾", false, args...).Print().CallHook()
}

func Savef(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("💾", false, s).Print().CallHook()
}

func (zone Zone) Save(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("💾", false, args...).Print().CallHook()
}

func (zone Zone) Savef(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("💾", false, s).Print().CallHook()
}

func Delete(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("❌", false, args...).Print().CallHook()
}

func Deletef(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("❌", false, s).Print().CallHook()
}

func (zone Zone) Delete(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("❌", false, args...).Print().CallHook()
}

func (zone Zone) Deletef(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("❌", false, s).Print().CallHook()
}

func Data(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("💼", false, args...).Print().CallHook()
}

func Dataf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("💼", false, s).Print().CallHook()
}

func (zone Zone) Data(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("💼", false, args...).Print().CallHook()
}

func (zone Zone) Dataf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("💼", false, s).Print().CallHook()
}

func Line(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("➖", false, args...).Print().CallHook()
}

func Linef(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("➖", false, s).Print().CallHook()
}

func (zone Zone) Line(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("➖", false, args...).Print().CallHook()
}

func (zone Zone) Linef(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("➖", false, s).Print().CallHook()
}

func Init(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🎬", false, args...).Print().CallHook()
}

func Initf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🎬", false, s).Print().CallHook()
}

func (zone Zone) Init(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🎬", false, args...).Print().CallHook()
}

func (zone Zone) Initf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🎬", false, s).Print().CallHook()
}

func Update(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🆙", false, args...).Print().CallHook()
}

func Updatef(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🆙", false, s).Print().CallHook()
}

func (zone Zone) Update(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🆙", false, args...).Print().CallHook()
}

func (zone Zone) Updatef(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🆙", false, s).Print().CallHook()
}

func Ok(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🆗", false, args...).Print().CallHook()
}

func Okf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🆗", false, s).Print().CallHook()
}

func (zone Zone) Ok(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🆗", false, args...).Print().CallHook()
}

func (zone Zone) Okf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🆗", false, s).Print().CallHook()
}

func Build(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🔧", false, args...).Print().CallHook()
}

func Buildf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🔧", false, s).Print().CallHook()
}

func (zone Zone) Build(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🔧", false, args...).Print().CallHook()
}

func (zone Zone) Buildf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🔧", false, s).Print().CallHook()
}

func Aconstructor(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🛠️", false, args...).Print().CallHook()
}

func Aconstructorf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🛠️", false, s).Print().CallHook()
}

func (zone Zone) Aconstructor(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🛠️", false, args...).Print().CallHook()
}

func (zone Zone) Aconstructorf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🛠️", false, s).Print().CallHook()
}

func NotFound(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🚫", false, args...).Print().CallHook()
}

func NotFoundf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🚫", false, s).Print().CallHook()
}

func (zone Zone) NotFound(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🚫", false, args...).Print().CallHook()
}

func (zone Zone) NotFoundf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🚫", false, s).Print().CallHook()
}

func Found(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("👁️‍🗨️", false, args...).Print().CallHook()
}

func Foundf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("👁️‍🗨️", false, s).Print().CallHook()
}

func (zone Zone) Found(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("👁️‍🗨️", false, args...).Print().CallHook()
}

func (zone Zone) Foundf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("👁️‍🗨️", false, s).Print().CallHook()
}

func Result(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("📌", false, args...).Print().CallHook()
}

func Resultf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("📌", false, s).Print().CallHook()
}

func (zone Zone) Result(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("📌", false, args...).Print().CallHook()
}

func (zone Zone) Resultf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("📌", false, s).Print().CallHook()
}

func Input(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("📥", false, args...).Print().CallHook()
}

func Inputf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("📥", false, s).Print().CallHook()
}

func (zone Zone) Input(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("📥", false, args...).Print().CallHook()
}

func (zone Zone) Inputf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("📥", false, s).Print().CallHook()
}

func Output(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("📤", false, args...).Print().CallHook()
}

func Outputf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("📤", false, s).Print().CallHook()
}

func (zone Zone) Output(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("📤", false, args...).Print().CallHook()
}

func (zone Zone) Outputf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("📤", false, s).Print().CallHook()
}

func Function(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🔨", false, args...).Print().CallHook()
}

func Functionf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🔨", false, s).Print().CallHook()
}

func (zone Zone) Function(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🔨", false, args...).Print().CallHook()
}

func (zone Zone) Functionf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🔨", false, s).Print().CallHook()
}

func Key(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🔑", false, args...).Print().CallHook()
}

func Keyf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🔑", false, s).Print().CallHook()
}

func (zone Zone) Key(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🔑", false, args...).Print().CallHook()
}

func (zone Zone) Keyf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🔑", false, s).Print().CallHook()
}

func Security(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🔒", false, args...).Print().CallHook()
}

func Securityf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🔒", false, s).Print().CallHook()
}

func (zone Zone) Security(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🔒", false, args...).Print().CallHook()
}

func (zone Zone) Securityf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🔒", false, s).Print().CallHook()
}

func AccessToken(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🔑", false, args...).Print().CallHook()
}

func AccessTokenf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🔑", false, s).Print().CallHook()
}

func (zone Zone) AccessToken(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🔑", false, args...).Print().CallHook()
}

func (zone Zone) AccessTokenf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🔑", false, s).Print().CallHook()
}

func RefreshToken(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🗝️", false, args...).Print().CallHook()
}

func RefreshTokenf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🗝️", false, s).Print().CallHook()
}

func (zone Zone) RefreshToken(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🗝️", false, args...).Print().CallHook()
}

func (zone Zone) RefreshTokenf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🗝️", false, s).Print().CallHook()
}

func Transmit(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("📡", false, args...).Print().CallHook()
}

func Transmitf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("📡", false, s).Print().CallHook()
}

func (zone Zone) Transmit(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("📡", false, args...).Print().CallHook()
}

func (zone Zone) Transmitf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("📡", false, s).Print().CallHook()
}

func Start(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🏁", false, args...).Print().CallHook()
}

func Startf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🏁", false, s).Print().CallHook()
}

func (zone Zone) Start(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🏁", false, args...).Print().CallHook()
}

func (zone Zone) Startf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🏁", false, s).Print().CallHook()
}

func Stop(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🛑", false, args...).Print().CallHook()
}

func Stopf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🛑", false, s).Print().CallHook()
}

func (zone Zone) Stop(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🛑", false, args...).Print().CallHook()
}

func (zone Zone) Stopf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🛑", false, s).Print().CallHook()
}

func In(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("→", false, args...).Print().CallHook()
}

func Inf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("→", false, s).Print().CallHook()
}

func (zone Zone) In(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("→", false, args...).Print().CallHook()
}

func (zone Zone) Inf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("→", false, s).Print().CallHook()
}

func Out(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("←", false, args...).Print().CallHook()
}

func Outf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("←", false, s).Print().CallHook()
}

func (zone Zone) Out(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("←", false, args...).Print().CallHook()
}

func (zone Zone) Outf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("←", false, s).Print().CallHook()
}

func ArrowIn(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("=>", false, args...).Print().CallHook()
}

func ArrowInf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("=>", false, s).Print().CallHook()
}

func (zone Zone) ArrowIn(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("=>", false, args...).Print().CallHook()
}

func (zone Zone) ArrowInf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("=>", false, s).Print().CallHook()
}

func ArrowOut(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("<=", false, args...).Print().CallHook()
}

func ArrowOutf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("<=", false, s).Print().CallHook()
}

func (zone Zone) ArrowOut(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("<=", false, args...).Print().CallHook()
}

func (zone Zone) ArrowOutf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("<=", false, s).Print().CallHook()
}

func SmallArrowIn(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("->", false, args...).Print().CallHook()
}

func SmallArrowInf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("->", false, s).Print().CallHook()
}

func (zone Zone) SmallArrowIn(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("->", false, args...).Print().CallHook()
}

func (zone Zone) SmallArrowInf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("->", false, s).Print().CallHook()
}

func SmallArrowOut(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("<-", false, args...).Print().CallHook()
}

func SmallArrowOutf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("<-", false, s).Print().CallHook()
}

func (zone Zone) SmallArrowOut(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("<-", false, args...).Print().CallHook()
}

func (zone Zone) SmallArrowOutf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("<-", false, s).Print().CallHook()
}

func RequestGet(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🔷", false, args...).Print().CallHook()
}

func RequestGetf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🔷", false, s).Print().CallHook()
}

func (zone Zone) RequestGet(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🔷", false, args...).Print().CallHook()
}

func (zone Zone) RequestGetf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🔷", false, s).Print().CallHook()
}

func RequestPost(args ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	return DefaultZone.NewEvent("🔶", false, args...).Print().CallHook()
}

func RequestPostf(format string, v ...any) Event {
	if !DefaultZone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return DefaultZone.NewEvent("🔶", false, s).Print().CallHook()
}

func (zone Zone) RequestPost(args ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	return zone.NewEvent("🔶", false, args...).Print().CallHook()
}

func (zone Zone) RequestPostf(format string, v ...any) Event {
	if !zone.enabled(false) {
		var evt Event
		return evt
	}
	s := fmt.Sprintf(format, v...)
	return zone.NewEvent("🔶", false, s).Print().CallHook()
}
