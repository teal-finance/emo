// Code generated by https://github.com/teal-finance/emo/blob/main/codegen/dart/gen.go ; DO NOT EDIT.

import 'package:meta/meta.dart';
import 'types.dart';

/// The debug printer
@immutable
class EmoDebug {
  /// Default constructor
  const EmoDebug(
      {this.zone,
      this.hook,
      this.deactivatePrint = false,
      this.deactivateEmojis = false});

  /// Deactivate the debug session
  ///
  /// This will not print anything anymore
  final bool deactivatePrint;

  /// The debug zone
  ///
  /// An optional indication about a local debug area. It
  /// will prefix the messages
  final String? zone;

  /// A hook to execute after each function call
  ///
  /// Can be used to pipe the emodebug messages to logging
  final EmoDebugHook? hook;

  /// Deactivate the emojis
  ///
  /// This will not print the emojis in the log messages
  final bool deactivateEmojis;

  /// A debug message for a ready state
  ///
  /// emoji: ⏲️
  String ready([dynamic obj, String? domain]) {
    obj ??= "ready";
    return emo("⏲️", obj, domain);
  }

  /// A simple message with no emoji
  String msg([dynamic obj, String? domain]) => emo(null, obj, domain);

  /// Print a debug message from an emoji
  String emo(String? emoji, [dynamic obj, String? domain]) {
    final msg = _getEmoString(emoji, obj, domain);
    if (!deactivatePrint) {
      print(msg);
    }
    hook?.call(msg);
    return msg;
  }

  /// A separator line
  String sep() {
    const msg = "➖➖➖➖➖➖➖➖➖➖➖";
    if (!deactivatePrint) {
      print(msg);
    }
    hook?.call(msg);
    return msg;
  }

  /// A section start
  String section(String name) {
    final msg = "➖➖➖➖➖ $name ➖➖➖➖➖";
    if (!deactivatePrint) {
      print(msg);
    }
    hook?.call(msg);
    return msg;
  }

  /// A section end
  String sectionEnd() => sep();

  String _getEmoString(String? emoji, dynamic obj, String? domain) {
    final l = <String>[];
    if (!deactivateEmojis && emoji != null) {
      l.add("$emoji");
    }
    if (zone != null) {
      l.add("[$zone]");
    }
    if (domain != null) {
      final dm = '${domain[0].toUpperCase()}${domain.substring(1)}:';
      l.add(dm);
    }
    if (obj != null) {
      l.add("$obj");
    }
    //print("$obj ======= $emoji");
    //print(l);
    return l.join(" ");
  }

  /// A debug message for info
  ///
  /// emoji: ℹ️
  String info([dynamic obj, String? domain]) => emo("ℹ️", obj, domain);

  /// A debug message for warning
  ///
  /// emoji: 🔔
  String warning([dynamic obj, String? domain]) => emo("🔔", obj, domain);

  /// A debug message for error
  ///
  /// emoji: 💢
  String error([dynamic obj, String? domain]) => emo("💢", obj, domain);

  /// A debug message for query
  ///
  /// emoji: 🗄️
  String query([dynamic obj, String? domain]) => emo("🗄️", obj, domain);

  /// A debug message for queryError
  ///
  /// emoji: 🗄️
  String queryError([dynamic obj, String? domain]) => emo("🗄️", obj, domain);

  /// A debug message for encrypt
  ///
  /// emoji: 🎼
  String encrypt([dynamic obj, String? domain]) => emo("🎼", obj, domain);

  /// A debug message for encryptError
  ///
  /// emoji: 🎼
  String encryptError([dynamic obj, String? domain]) => emo("🎼", obj, domain);

  /// A debug message for decrypt
  ///
  /// emoji: 🗝️
  String decrypt([dynamic obj, String? domain]) => emo("🗝️", obj, domain);

  /// A debug message for decryptError
  ///
  /// emoji: 🗝️
  String decryptError([dynamic obj, String? domain]) => emo("🗝️", obj, domain);

  /// A debug message for time
  ///
  /// emoji: ⏱️
  String time([dynamic obj, String? domain]) => emo("⏱️", obj, domain);

  /// A debug message for timeError
  ///
  /// emoji: ⏱️
  String timeError([dynamic obj, String? domain]) => emo("⏱️", obj, domain);

  /// A debug message for param
  ///
  /// emoji: 📩
  String param([dynamic obj, String? domain]) => emo("📩", obj, domain);

  /// A debug message for paramError
  ///
  /// emoji: 📩
  String paramError([dynamic obj, String? domain]) => emo("📩", obj, domain);

  /// A debug message for debug
  ///
  /// emoji: 💊
  String debug([dynamic obj, String? domain]) => emo("💊", obj, domain);

  /// A debug message for state
  ///
  /// emoji: 📢
  String state([dynamic obj, String? domain]) => emo("📢", obj, domain);

  /// A debug message for save
  ///
  /// emoji: 💾
  String save([dynamic obj, String? domain]) => emo("💾", obj, domain);

  /// A debug message for delete
  ///
  /// emoji: ❌
  String delete([dynamic obj, String? domain]) => emo("❌", obj, domain);

  /// A debug message for data
  ///
  /// emoji: 💼
  String data([dynamic obj, String? domain]) => emo("💼", obj, domain);

  /// A debug message for line
  ///
  /// emoji: ➖
  String line([dynamic obj, String? domain]) => emo("➖", obj, domain);

  /// A debug message for init
  ///
  /// emoji: 🎬
  String init([dynamic obj, String? domain]) => emo("🎬", obj, domain);

  /// A debug message for update
  ///
  /// emoji: 🆙
  String update([dynamic obj, String? domain]) => emo("🆙", obj, domain);

  /// A debug message for ok
  ///
  /// emoji: 🆗
  String ok([dynamic obj, String? domain]) => emo("🆗", obj, domain);

  /// A debug message for build
  ///
  /// emoji: 🔧
  String build([dynamic obj, String? domain]) => emo("🔧", obj, domain);

  /// A debug message for aconstructor
  ///
  /// emoji: 🛠️
  String aconstructor([dynamic obj, String? domain]) => emo("🛠️", obj, domain);

  /// A debug message for notFound
  ///
  /// emoji: 🚫
  String notFound([dynamic obj, String? domain]) => emo("🚫", obj, domain);

  /// A debug message for found
  ///
  /// emoji: 👁️‍🗨️
  String found([dynamic obj, String? domain]) => emo("👁️‍🗨️", obj, domain);

  /// A debug message for result
  ///
  /// emoji: 📌
  String result([dynamic obj, String? domain]) => emo("📌", obj, domain);

  /// A debug message for input
  ///
  /// emoji: 📥
  String input([dynamic obj, String? domain]) => emo("📥", obj, domain);

  /// A debug message for output
  ///
  /// emoji: 📤
  String output([dynamic obj, String? domain]) => emo("📤", obj, domain);

  /// A debug message for function
  ///
  /// emoji: 🔨
  String function([dynamic obj, String? domain]) => emo("🔨", obj, domain);

  /// A debug message for key
  ///
  /// emoji: 🔑
  String key([dynamic obj, String? domain]) => emo("🔑", obj, domain);

  /// A debug message for security
  ///
  /// emoji: 🔒
  String security([dynamic obj, String? domain]) => emo("🔒", obj, domain);

  /// A debug message for accessToken
  ///
  /// emoji: 🔑
  String accessToken([dynamic obj, String? domain]) => emo("🔑", obj, domain);

  /// A debug message for refreshToken
  ///
  /// emoji: 🗝️
  String refreshToken([dynamic obj, String? domain]) => emo("🗝️", obj, domain);

  /// A debug message for transmit
  ///
  /// emoji: 📡
  String transmit([dynamic obj, String? domain]) => emo("📡", obj, domain);

  /// A debug message for start
  ///
  /// emoji: 🏁
  String start([dynamic obj, String? domain]) => emo("🏁", obj, domain);

  /// A debug message for stop
  ///
  /// emoji: 🛑
  String stop([dynamic obj, String? domain]) => emo("🛑", obj, domain);

  /// A debug message for in
  ///
  /// emoji: →
  String in([dynamic obj, String? domain]) => emo("→", obj, domain);

  /// A debug message for out
  ///
  /// emoji: ←
  String out([dynamic obj, String? domain]) => emo("←", obj, domain);

  /// A debug message for arrowIn
  ///
  /// emoji: =>
  String arrowIn([dynamic obj, String? domain]) => emo("=>", obj, domain);

  /// A debug message for arrowOut
  ///
  /// emoji: <=
  String arrowOut([dynamic obj, String? domain]) => emo("<=", obj, domain);

  /// A debug message for smallArrowIn
  ///
  /// emoji: ->
  String smallArrowIn([dynamic obj, String? domain]) => emo("->", obj, domain);

  /// A debug message for smallArrowOut
  ///
  /// emoji: <-
  String smallArrowOut([dynamic obj, String? domain]) => emo("<-", obj, domain);

  /// A debug message for requestGet
  ///
  /// emoji: 🔷
  String requestGet([dynamic obj, String? domain]) => emo("🔷", obj, domain);

  /// A debug message for requestPost
  ///
  /// emoji: 🔶
  String requestPost([dynamic obj, String? domain]) => emo("🔶", obj, domain);
}