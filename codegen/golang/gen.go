package golang

import (
	"log"
	"path/filepath"
	"strconv"

	"github.com/dolmen-go/codegen"
	"github.com/teal-finance/emo/codegen/core"
)

func GenGo(ref []core.Ref) {
	template := fileStart
	for _, item := range ref {
		template += genFunc(item.Name, item.Emoji, item.IsError)
	}
	template += fileEnd

	tmpl := codegen.MustParse(template)

	fn, err := filepath.Abs("generated.go")
	if err != nil {
		log.Fatal(err)
	}

	if err := tmpl.CreateFile(fn, "emo"); err != nil {
		log.Fatal(err)
	}

	fmt.Println("[codegen] File: " + fn)
}

var fileStart = `// Code generated by https://github.com/teal-finance/emo/blob/main/codegen/golang/gen.go ; DO NOT EDIT.

package emo

import (
	"fmt"
	"log"
)
`

func genFunc(name, emoji string, isError bool) string {
	if isError {
		return `
func (zone Zone) ` + name + `(args ...any) Event {
	return zone.NewEvent("` + emoji + `", ` + strconv.FormatBool(isError) + `, args...).Print().CallHook()
}

func (zone Zone) ` + name + `f(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.` + name + `(s)
}

	`
	}

	return `
func (zone Zone) ` + name + `(args ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		return zone.NewEvent("` + emoji + `", ` + strconv.FormatBool(isError) + `, args...).Print().CallHook()
	}
	var evt Event
	return evt
}

func (zone Zone) ` + name + `f(format string, v ...any) Event {
	if zone.PrintAll || (zone.Hook != nil) {
		s := fmt.Sprintf(format, v...)
		return zone.` + name + `(s)
	}
	var evt Event
	return evt
}

`
}

var fileEnd = `
func (zone Zone) Default() *log.Logger {
	return log.Default()
}

func (zone Zone) Print(args ...any) Event {
	return zone.P().NewEvent("ðŸ“°", false, args...).Print()
}

func (zone Zone) Printf(format string, v ...any) Event {
	s := fmt.Sprintf(format, v...)
	return zone.P().NewEvent("ðŸ“°", false, s).Print()
}

func (zone Zone) Fatal(args ...any) {
	m := zone.NewEvent("ðŸ¤¯", true, args...).Message()
	log.Fatal(m)
}

func (zone Zone) Fatalf(format string, v ...any) {
	s := fmt.Sprintf(format, v...)
	m := zone.NewEvent("ðŸ¤¯", true, s).Message()
	log.Fatal(m)
}

func (zone Zone) Panic(args ...any) {
	m := zone.NewEvent("ðŸ˜µ", true, args...).Message()
	log.Panic(m)
}

func (zone Zone) Panicf(format string, v ...any) {
	s := fmt.Sprintf(format, v...)
	m := zone.NewEvent("ðŸ˜µ", true, s).Message()
	log.Panic(m)
}
`
