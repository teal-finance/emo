// Code generated by https://github.com/teal-finance/emo/blob/main/codegen/ts/gen.go ; DO NOT EDIT.
class Emo {
    /// Default constructor
    constructor({ zone = null, activatePrint = true, activateEmojis = true, hook = null } = {
        zone: null,
        activatePrint: true,
        activateEmojis: true,
        hook: null
    }) {
        this.zone = zone;
        this.activatePrint = activatePrint;
        this.activateEmojis = activateEmojis;
        this.hook = hook;
    }
    info(...obj) { return this.emo("ℹ️", obj); }
    warning(...obj) { return this.emo("🔔", obj); }
    error(...obj) { return this.emo("💢", obj); }
    query(...obj) { return this.emo("🗄️", obj); }
    queryError(...obj) { return this.emo("🗄️", obj); }
    encrypt(...obj) { return this.emo("🎼", obj); }
    encryptError(...obj) { return this.emo("🎼", obj); }
    decrypt(...obj) { return this.emo("🗝️", obj); }
    decryptError(...obj) { return this.emo("🗝️", obj); }
    time(...obj) { return this.emo("⏱️", obj); }
    timeError(...obj) { return this.emo("⏱️", obj); }
    param(...obj) { return this.emo("📩", obj); }
    paramError(...obj) { return this.emo("📩", obj); }
    debug(...obj) { return this.emo("💊", obj); }
    state(...obj) { return this.emo("📢", obj); }
    save(...obj) { return this.emo("💾", obj); }
    delete(...obj) { return this.emo("❌", obj); }
    data(...obj) { return this.emo("💼", obj); }
    line(...obj) { return this.emo("➖", obj); }
    init(...obj) { return this.emo("🎬", obj); }
    update(...obj) { return this.emo("🆙", obj); }
    ok(...obj) { return this.emo("🆗", obj); }
    build(...obj) { return this.emo("🔧", obj); }
    aconstructor(...obj) { return this.emo("🛠️", obj); }
    notFound(...obj) { return this.emo("🚫", obj); }
    found(...obj) { return this.emo("👁️‍🗨️", obj); }
    result(...obj) { return this.emo("📌", obj); }
    input(...obj) { return this.emo("📥", obj); }
    output(...obj) { return this.emo("📤", obj); }
    function(...obj) { return this.emo("🔨", obj); }
    key(...obj) { return this.emo("🔑", obj); }
    security(...obj) { return this.emo("🔒", obj); }
    accessToken(...obj) { return this.emo("🔑", obj); }
    refreshToken(...obj) { return this.emo("🗝️", obj); }
    transmit(...obj) { return this.emo("📡", obj); }
    start(...obj) { return this.emo("🏁", obj); }
    stop(...obj) { return this.emo("🛑", obj); }
    in(...obj) { return this.emo("→", obj); }
    out(...obj) { return this.emo("←", obj); }
    arrowIn(...obj) { return this.emo("=>", obj); }
    arrowOut(...obj) { return this.emo("<=", obj); }
    smallArrowIn(...obj) { return this.emo("->", obj); }
    smallArrowOut(...obj) { return this.emo("<-", obj); }
    requestGet(...obj) { return this.emo("🔷", obj); }
    requestPost(...obj) { return this.emo("🔶", obj); }
    /// A simple message with no emoji
    msg(...obj) { return this.emo("", obj); }
    /// A debug message for a ready state
    ///
    /// emoji: ⏲️
    ready(...obj) {
        if (obj.length === 0) {
            obj[0] = "ready";
        }
        return this.emo("⏲️", obj);
    }
    /// A separator line
    sep() {
        const msg = "➖➖➖➖➖➖➖➖➖➖➖";
        if (this.activatePrint) {
            console.log(msg);
        }
        return msg;
    }
    /// A section start
    section(name) {
        const msg = "➖➖➖➖➖ " + name + " ➖➖➖➖➖";
        if (this.activatePrint) {
            console.log(msg);
        }
        return msg;
    }
    /// A section end
    sectionEnd() { return this.sep(); }
    /// Print a debug message from an emoji
    emo(emoji, obj) {
        const msg = this._getEmoString(emoji, obj);
        if (this.activatePrint) {
            console.log(msg);
        }
        if (this.hook != null) {
            this.hook(msg);
        }
        return msg;
    }
    print(data) {
        Emo.json(data);
    }
    static json(data) {
        console.log(JSON.stringify(data, null, "  "));
    }
    _getEmoString(emoji, obj) {
        const l = new Array();
        if (this.activateEmojis && emoji != null) {
            l.push(emoji);
        }
        if (this.zone != null) {
            l.push("[" + this.zone + "]");
        }
        if (obj.length > 0) {
            obj.forEach((o) => {
                if (typeof o === 'object') {
                    l.push(JSON.stringify(o));
                }
                else {
                    l.push(o.toString());
                }
            });
        }
        return l.join(" ");
    }
}

export { Emo };
