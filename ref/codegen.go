package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"path/filepath"
	"strconv"

	"github.com/dolmen-go/codegen"
)

type Ref struct {
	Name    string `json:"name"`
	Emoji   string `json:"emoji"`
	IsError bool   `json:"isError"`
}

func getRef() []Ref {
	exPath, _ := filepath.Abs("./ref/ref.json")
	fmt.Println("Open", exPath)
	file, _ := ioutil.ReadFile(exPath)
	data := []Ref{}
	_ = json.Unmarshal([]byte(file), &data)
	return data
}

func genFunc(name string, emoji string, isError bool) string {
	return `func (zone Zone) ` + name + `(args ...interface{}) Event {
	return processEvent("` + emoji + `", zone, ` + strconv.FormatBool(isError) + `, args)
}
`
}

func main() {
	data := getRef()
	fs := ""
	for _, item := range data {
		f := genFunc(item.Name, item.Emoji, item.IsError)
		fs += f + "\n"
	}
	template := `// Code generated by ref/codegen.go; DO NOT EDIT.
	{{/**/}}//+build {{.}}
	
	package emo
	` + fs

	tmpl := codegen.MustParse(template)
	f := "emo_gen.go"
	if err := tmpl.CreateFile(f, "emo"); err != nil {
		log.Fatal(err)
	}
	log.Printf("File %s created.\n", f)
}
